---
title: "Analysis of Head and Neck Squamous Cell Carcinomas Data"
subtitle: "Group 21"
author:
  - "Asta Zeuner s203544"
  - "Astrid Ginnerup s203523"
  - "Emma Dan√∏ s203564"
  - "Andrea Kristensen s193769"
  - "Yayi Wang s243554"
html:
  embed-resources: true
execute: 
  message: false
  warning: false
format:
  revealjs:
    theme: theme.scss
    transition: fade
    background-transition: fade
    highlight-style: ayu-mirage
    code-block-height: 600px
editor: visual
css: style.css


---

## Introduction {.smaller}

-   Background
    -   Head and neck squamous cell carcinomas (HNSCC) are a group of malignancies affecting the mucosal surfaces of the head and neck.
    -   A focus on phenotype, survival data, and protein expression quantification from the GDC Hub.
-   Research Objective
    -   Apply Tidyverse techniques learned in class to real-world data.
    -   Extract and uncover scientific insights from the HNSCC datasets. ![](../results/images/head_neck.png){width="100%" height="100%"}

## Materials and methods Astrid {.smaller}

::: columns
::: {.column width="40%"}
<!-- -->

-   **Download, name and data**

    -   Phenotype (n=604)

    -   Survival data (n=603)

    -   Protein Expression (n=354)

-   **Join tables**

    -   inner_join

    -   pivot_longer\
:::

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
#| warning: false
#| code-line-numbers: "|5-16|49-55|58-67||69-71|76-78"

library("tidyverse")
library("table1")
library("here")

raw_dir <- here("data/_raw/")
data_file <- "TCGA-HNSC.protein.tsv.gz"
data_loc <- "https://gdc-hub.s3.us-east-1.amazonaws.com/download/"

if( !dir.exists(raw_dir) ){
  dir.create(path = raw_dir)
}
if( !file.exists(str_c(raw_dir, data_file)) ){
  download.file(
    url = str_c(data_loc, data_file),
    destfile = str_c(raw_dir, data_file))
}

raw_dir <- here("data/_raw/")
data_file <- "TCGA-HNSC.survival.tsv.gz"
data_loc <- "https://gdc-hub.s3.us-east-1.amazonaws.com/download/"

if( !dir.exists(raw_dir) ){
  dir.create(path = raw_dir)
}
if( !file.exists(str_c(raw_dir, data_file)) ){
  download.file(
    url = str_c(data_loc, data_file),
    destfile = str_c(raw_dir, data_file))
}

raw_dir <- here("data/_raw/")
data_file <- "TCGA-HNSC.clinical.tsv.gz"
data_loc <- "https://gdc-hub.s3.us-east-1.amazonaws.com/download/"

if( !dir.exists(raw_dir) ){
  dir.create(path = raw_dir)
}
if( !file.exists(str_c(raw_dir, data_file)) ){
  download.file(
    url = str_c(data_loc, data_file),
    destfile = str_c(raw_dir, data_file))
}


protein_data <- read_tsv(file = here("data/_raw/TCGA-HNSC.protein.tsv.gz"))
survival_data <- read_tsv(file = here("data/_raw/TCGA-HNSC.survival.tsv.gz"))
clinical_data <- read_tsv(file = here("data/_raw/TCGA-HNSC.clinical.tsv.gz"))

meta_data <- inner_join(clinical_data, survival_data, by = c("sample" = "sample"))

data_dir <- here("data/")

write_tsv(x = meta_data, 
          file = str_c(data_dir, 
                       "01_meta_data_load.tsv.gz"))

# Pivot the peptide expression data longer
peptide_long <- protein_data |> 
                pivot_longer(cols = -1, 
                             names_to = "sample", 
                             values_to = "expression")

data_dir <- here("data/")

write_tsv( x = peptide_long,
           file = str_c(data_dir, 
                  "02_peptide_expression_load.tsv.gz"))

final_data <- inner_join(meta_data, 
                         peptide_long, 
                         by = "sample")

data_dir <- here("data/")


write_tsv( x = final_data,
           file = str_c(data_dir, 
                  "03_expression_meta_data_load.tsv.gz"))

```
:::
:::

## Cleaning and Augmenting Data {.smaller}

::: columns
::: {.column width="35%"}
<!-- -->

-   **02_clean**

    -   Choosing variables

    -   Removing TCGA in sample_id

-   **03_augment**

    -   Creating patient_id from sample_id

    -   Creating 5 and 10 years age interval

    -   Creating expression mean variables

    -   Creating binominal variable for alcohol history
:::

::: {.column width="65%"}
```{r}
#| echo: true
#| eval: false
#| warning: false
#| code-line-numbers: "|1-18|21-23|26-29|32-49|52-56|59-70|73-77"



# Choosing variables
expression_meta_data_clean_1 <- expression_meta_data_clean |> 
  select(sample_id = sample,
         gender = gender.demographic,
         race = race.demographic,
         vital_status = vital_status.demographic,
         overall_survival = OS,
         primary_site,
         pathologic_stage = ajcc_pathologic_stage.diagnoses,
         age_at_index = age_at_index.demographic,
         year_of_birth = year_of_birth.demographic,
         year_of_death = year_of_death.demographic,
         tissue_source_location = name.tissue_source_site,
         cigarettes_per_day = cigarettes_per_day.exposures,
         years_smoked = years_smoked.exposures,
         alcohol_history = alcohol_history.exposures,
         peptide_target,
         expression)


# Removing TCGA in sample_id
expression_meta_data_clean_2 <- expression_meta_data_clean_1 |> 
  mutate(sample_id = sub("^TCGA-(.*)", "\\1", sample_id))


# Creating patient_id from sample_id
expression_meta_data_aug_1 <- expression_meta_data_aug |> 
  mutate(patient_id = sub("(.*)-..", "\\1", sample_id)) |> 
  relocate(patient_id, .before = sample_id)


# Creating 5 and 10 years age intervals as variables
expression_meta_data_aug_2 <- expression_meta_data_aug_1 |> 
  mutate(age_interval_5_year = cut(age_at_index,
                                   breaks = seq(0, 100, by = 5),
                                   labels = paste(seq(0, 95, by = 5),
                                                  seq(5, 100, by = 5) - 1,
                                                  sep = "-"), 
                                   include.lowest = TRUE), 
          age_interval_10_year = cut(age_at_index,
                                     breaks = seq(0, 100, by = 10),
                                     labels = paste(seq(0, 90, by = 10),
                                                    seq(10, 100, by = 10) - 1,
                                                    sep = "-"), 
                                     include.lowest = TRUE)) |> 

# Placing variables after age_at_index variable
  relocate(age_interval_5_year, .after = age_at_index) |> 
  relocate(age_interval_10_year, .after = age_interval_5_year)


# Creating expression mean variable
expression_meta_data_aug_3 <- expression_meta_data_aug_2 |> 
  group_by(peptide_target) |> 
  mutate(mean_expression = mean(expression, na.rm = TRUE)) |> 
  ungroup() # Removing the grouping to ensure that the following work is not messed up


# Creating expression mean variable for each pathologic state
mean_of_expression_pathologic_stages <- expression_meta_data_aug_3 |> 
  filter(!is.na(pathologic_stage)) |>  
  group_by(peptide_target, pathologic_stage) |> 
  summarise(mean_expression = mean(expression, na.rm = TRUE), .groups = "drop") |> 
  pivot_wider(names_from = pathologic_stage,
              values_from = mean_expression,
              names_prefix = "mean_expression_")

# Join the calculated means back into the original dataset with the join function
expression_meta_data_aug_4 <- expression_meta_data_aug_3 |> 
  right_join(mean_of_expression_pathologic_stages, by = "peptide_target")


# Creating binominal variable for alcohol history
expression_meta_data_aug_5 <- expression_meta_data_aug_4 |> 
  mutate(alcohol_history_binomial = case_when(alcohol_history == "No" ~ 0,
                                              alcohol_history == "Yes" ~ 1)) |> 
  relocate(alcohol_history_binomial, .after = alcohol_history)


```
:::
:::

## Description Yayi {.smaller}

```{r}
#| echo: false
#| eval: false

expression_meta_data_load<- read_tsv(file = here("data/03_expression_meta_data_load.tsv.gz"))

expression_meta_data_clean <- read_tsv(file = here("data/04_expression_meta_data_clean.tsv.gz"))

expression_meta_data_aug <- read_tsv(file = here("data/04_expression_meta_data_aug.tsv.gz"))
```

-   Check columns and rows (98 columns vs 26 columns, 353 patients)
-   Check Pathologic Stage (5 stages)
-   Check Patients statistics and distribution

```{r}
#| echo: false # Show the code
#| eval: false  # Execute the code

expression_meta_data_aug |>
  select(patient_id) |>
  n_distinct()
```

```{r}
#| echo: false  # Show the code
#| eval: false  # Execute the code
expression_meta_data_load |>
  select(submitter_id) |>
  n_distinct()
```

```{r}
#| echo: false  # Show the code
#| eval: false  # Execute the code

expression_meta_data_aug |> 
  group_by(pathologic_stage) |> 
  summarize(count = n(), .groups = "drop")
```

Check the lowest and highest age

```{r}
#| echo: false  # Show the code
#| eval: false  # Execute the code

expression_meta_data_aug |> 
  summarize(
    mean_age = mean(age_at_index, na.rm = TRUE),   # Mean age
    middle_age = median(age_at_index, na.rm = TRUE) # Median age
  )
```

::: columns
::: {.column width="50%"}
![](../results/images/04_pathologic_stage_distribution.png){width="100%" height="100%"}
:::

::: {.column width="50%"}
![](../results/images/04_vital_status_age_distribution.png){width="100%" height="100%"}
:::
:::

## Analysis heatmap {.smaller}

::: columns
::: {.column width="70%"}
<!-- -->


![](../results/images/05_analysis_heatmap.png){width="100%" height="100%"}
:::


::: {.column width="30%"}

```{r}
#| echo: true
#| eval: false
#| warning: false
#| code-line-numbers: "|1-6|10-15|19-24|28-37|41-47|49-58|60-66|68-77|79-83"

# Select top 20 most upregulated peptide targets
most_upregulated <- expression_meta_data_analysis |> 
  filter(!is.na(mean_expression)) |> # Removing rows with NA
  group_by(peptide_target) |> 
  summarize(mean_expression = mean(expression, na.rm = TRUE), .groups = "drop") |> # Summarizing the mean_expression even though having a variable of this name, as it requires less coding in this way
  slice_max(order_by = mean_expression, n = 20)



# Select bottom 20 most downregulated 
most_downregulated <- expression_meta_data_analysis |> 
  filter(!is.na(expression)) |>  # Removing rows with NA
  group_by(peptide_target) |> 
  summarize(mean_expression = mean(expression, na.rm = TRUE), .groups = "drop") |> 
  slice_min(order_by = mean_expression, n = 20)



# Combine the two subsets
selected_peptides <- bind_rows(most_downregulated, most_upregulated)

# Extract the peptide_target levels for ordering in the heatmap
peptide_target_levels <- selected_peptides |> 
  pull(peptide_target)  # Pull the peptide_target column as a vector



# Filter the main dataset for the selected peptides and arrange by mean_expression in descending order
heatmap_selected_peptides <- expression_meta_data_analysis |> 
  filter(!age_interval_5_year %in% c("15-19", "20-24")) |> 
  semi_join(selected_peptides, by = "peptide_target") |>  # Keep rows with matching peptide_target
  filter(!is.na(mean_expression)) |>  # Removing all NAs
  group_by(peptide_target, age_interval_5_year) |> 
  summarize(
    mean_expression = mean(expression, na.rm = TRUE),  # Calculate mean expression
    .groups = "drop") |>   # Drop grouping after summarization
  arrange(desc(desc(mean_expression)))   # Sort by mean_expression, highest to lowest 



# Create the heatmap
heatmap <- heatmap_selected_peptides |> 
  ggplot(aes(
    x = factor(peptide_target, levels = peptide_target_levels),  # Use the extracted levels vector
    y = age_interval_5_year, 
    fill = mean_expression
  )) +
  
  # Heatmap tiles
  geom_tile(color = "white") +
  
  # Color gradient for expression
  scale_fill_gradient2(
    low = "blue", 
    mid = "white", 
    high = "red", 
    na.value = "black"
  ) +
  
  # Labels
  labs(
    title = "Heatmap of Expression Across Age Intervals and 20 Most Upregulated and 20 Most Downregulated Peptide Targets",
    x = "Peptide Target",
    y = "Age Interval",
    fill = "Mean Expression"
  ) +
  
  # Themes
  theme(
    # Axis text size
    axis.text.x = element_text(angle = 60, hjust = 1, size = 15),
    axis.text.y = element_text(size = 15),
    
    # Title and axis label sizes
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    
    # Legend position and text size
    legend.position = "bottom",
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 14)
  )


```

:::

:::

## Analysis linear model - Vital stage A and E {.smaller}

Linear model for expression of proteins present in tissue from patients with Head and Neck Cancer

Fitting a linear model to the protein expression data and the vital stage. This model is used to investigate if there is a difference in the protein expression levels in patients who is alive and patients who end up dying.

::: columns
::: {.column width="50%"}
![](images/06_analysis_lm_volcano_vital.png)
:::

::: {.column width="50%"}
![](images/06_analysis_lm_forest_plot.png)
:::
:::

## Analysis Linear model - Alcohol history A and E {.smaller}

::: columns
::: {.column width="50%"}
![](../results/images/04_pathologic_stage_distribution.png){width="100%" height="100%"}
:::

::: {.column width="50%"}
![](../results/images/04_vital_status_age_distribution.png){width="100%" height="100%"}
:::
:::

## Analysis visual Astrid {.smaller}

::: columns
::: {.column width="50%"}
![](../results/images/barplot_vital_status_genders.png){width="100%" height="100%"}
:::

::: {.column width="50%"}
![](../results/images/barplot_vital_status_genders_facet_races.png){width="100%" height="100%"}
:::
:::

## Analysis PCA A and E {.smaller}

::: columns
::: {.column width="50%"}
![](images/08_PCA_analysis_scree-01.png)
:::

::: {.column width="50%"}
![](images/08_PCA_analysis_PCA_stage.png)
:::
:::

## Discussion A and E {.smaller}
