---
title: "03_augment"
author:
- "Asta Zeuner - s203544 - azeuner"
- "Astrid Ginnerup - s203523 - AGinnerup"
- "Emma Dan√∏ - s203564 - EDanoe"
- "Andrea Kristensen - s193769 - AndreaMTK"
- "Yayi Wang - s243554 - Yayi0117"
html: 
    embed-resources: true
execute: 
  message: FALSE
  warning: FALSE
---

## Load libraries

```{r}
#| label: "load-libraries" 
#| echo: TRUE
#| eval: TRUE 
#| output: FALSE  

library("tidyverse")
library("table1")
library("here")
```

## Loading the data

The cleaned data is loaded into a new object.

```{r}
#| label: "load-data" 

expression_meta_data_aug <- read_tsv(file = here("data/04_expression_meta_data_clean.tsv.gz"))

```

## Creating new variables and adding them to the dataset

### Patient ID

A new variable called patient_id is created from sample_id using mutate().

```{r}
#| label: "Create-patient-id"

expression_meta_data_aug_1 <- expression_meta_data_aug |> 
  mutate(patient_id = sub("(.*)-..", "\\1", sample_id)) |> 
  relocate(patient_id, .before = sample_id)

```

### 5 and 10 years age intervals

Adding new variables with 5 and 10 year age intervals to the data using mutate() and saving in a new object. cut() is used to divide age_at_index into intervals of 5 years specified by breaks. Lables to represent each interval are created and ages at the lower boundary are included.

```{r}
#| label: "creating-5-and-10-year-intervals"

expression_meta_data_aug_2 <- expression_meta_data_aug_1 |> 
  mutate(age_interval_5_year = cut(age_at_index,
                                   breaks = seq(0, 100, by = 5),
                                   labels = paste(seq(0, 95, by = 5),
                                                  seq(5, 100, by = 5) - 1,
                                                  sep = "-"), 
                                   include.lowest = TRUE), 
          age_interval_10_year = cut(age_at_index,
                                     breaks = seq(0, 100, by = 10),
                                     labels = paste(seq(0, 90, by = 10),
                                                    seq(10, 100, by = 10) - 1,
                                                    sep = "-"), 
                                     include.lowest = TRUE)) |> 

  relocate(age_interval_5_year, .after = age_at_index) |> 
  relocate(age_interval_10_year, .after = age_interval_5_year) # Moving the age_interval columns to after age_at_index

```

### Mean expression of peptide_target

Adding a variable for the mean expression of each peptide_target using group_by() and mutate().

```{r}
#| label: "creating-expression-mean-variable"

expression_meta_data_aug_3 <- expression_meta_data_aug_2 |> 
  group_by(peptide_target) |> 
  mutate(mean_expression = mean(expression, na.rm = TRUE)) |> 
  ungroup() # Removing the grouping to ensure that the following work is not messed up
```

### Mean expression of each peptide_target for each pathologic state

Mean expressions of each peptide_target grouped by the pathologic_stage are calculated. NA's are excluded.\
The table is then widened with the new variables with the calculated mean named by the pathological_state using pivot_wider(). This is saved in a new object.

The mean expressions are then added to the dataset using right_join().

```{r}
#| label: "creating-expression-mean-variable-for-each-pathologic-state"

# Calculate the mean for each pathologic stage
mean_of_expression_pathologic_stages <- expression_meta_data_aug_3 |> 
  filter(!is.na(pathologic_stage)) |>  
  group_by(peptide_target, pathologic_stage) |> 
  summarise(mean_expression = mean(expression, na.rm = TRUE), .groups = "drop") |> 
  pivot_wider(names_from = pathologic_stage,
              values_from = mean_expression,
              names_prefix = "mean_expression_")

# Join the calculated means back into the original dataset with the join function
expression_meta_data_aug_4 <- expression_meta_data_aug_3 |> 
  right_join(mean_of_expression_pathologic_stages, by = "peptide_target")
```

### Adding alcohols history as a binomial factor (0 and 1)

```{r}

expression_meta_data_aug_5 <- expression_meta_data_aug_4 |> 
  mutate(alcohol_history_binomial = case_when(alcohol_history == "No" ~ 0,
                                              alcohol_history == "Yes" ~ 1)) |> 
  relocate(alcohol_history_binomial, .after = alcohol_history)


```

## Write the augmented dataset to a tsv.gz file

The augmented dataset is saved as a .tsv.gz file in data folder and will be the dataset used for description, analysis and modeling.

```{r}
#| label: "write-clean-data-to-tsv.gz"

data_dir <- here("data/")

write_tsv( x = expression_meta_data_aug_5,
           file = str_c(data_dir, 
                  "04_expression_meta_data_aug.tsv.gz"))

```
