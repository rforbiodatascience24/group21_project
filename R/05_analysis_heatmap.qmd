---
title: "05_analysis_heatmap"
author: 
  - "Asta Zeuner - s203544 - azeuner"
  - "Astrid Ginnerup - s203523 - AGinnerup"
  - "Emma Dan√∏ - s203564 - EDanoe"
  - "Andrea Kristensen - s193769 - AndreaMTK"
  - "Yayi Wang - s243554 - Yayi0117"
format: 
  html: 
    embed-resources: true
editor: visual
execute: 
  message: false
  warning: false
---

## Load libraries

```{r}
#| label: "load-libraries-05" 
#| echo: TRUE
#| eval: TRUE 
#| output: FALSE  

library("tidyverse")
library("table1")
library("here")

```

## Loading the data

```{r}
#| label: "load-data-05" 

expression_meta_data_analysis <- read_tsv(file = here("data/04_expression_meta_data_aug.tsv.gz"))

```

### Heat-map of 20 most up- and downregulated peptide-targets plotted against age

```{r}
#| label: "heatmap-20-most-up-and-down-regulated" 

# Select top 20 most upregulated peptide targets
most_upregulated <- expression_meta_data_analysis |> 
  
  filter(!is.na(mean_expression)) |> # Removing rows with NA
  
  group_by(peptide_target) |> 
  
  summarize(mean_expression = mean(expression, na.rm = TRUE), .groups = "drop") |> # Summarizing the mean_expression even though having a variable of this name, as it requires less coding in this way
  
  slice_max(order_by = mean_expression, n = 20)



# Select bottom 20 most downregulated 
most_downregulated <- expression_meta_data_analysis |> 
  
  filter(!is.na(expression)) |>  # Removing rows with NA
         
  group_by(peptide_target) |> 
  
  summarize(mean_expression = mean(expression, na.rm = TRUE), .groups = "drop") |> 
  
  slice_min(order_by = mean_expression, n = 20)

# Combine the two subsets
selected_peptides <- bind_rows(most_downregulated, most_upregulated)

# Inspect data
selected_peptides
```

```{r}
#| label: "extract-peptide-target-levels" 

# Extract the peptide_target levels for ordering in the heatmap
peptide_target_levels <- selected_peptides |> 
  
  pull(peptide_target)  # Pull the peptide_target column as a vector

peptide_target_levels
```

```{r}
#| label: "filter-and-arrage-data" 

# Filter the main dataset for the selected peptides and arrange by mean_expression in descending order
heatmap_selected_peptides <- expression_meta_data_analysis |> 
  
  filter(!age_interval_5_year %in% c("15-19", "20-24")) |> 
  
  semi_join(selected_peptides, by = "peptide_target") |>  # Keep rows with matching peptide_target
  
  filter(!is.na(mean_expression)) |>  # Removing all NAs
  
  group_by(peptide_target, age_interval_5_year) |> 
  
  summarize(
    mean_expression = mean(expression, na.rm = TRUE),  # Calculate mean expression
    .groups = "drop") |>   # Drop grouping after summarization
  
  arrange(desc(desc(mean_expression)))   # Sort by mean_expression, highest to lowest 


heatmap_selected_peptides
```

```{r}
#| label: "heat-map-20UP-20DOWN-against-age"
#| fig-width: 20
#| fig-height: 20

# Create the heatmap
heatmap <- heatmap_selected_peptides |> 
  
  ggplot(aes(
    x = factor(peptide_target, levels = peptide_target_levels),  # Use the extracted levels vector
    y = age_interval_5_year, 
    fill = mean_expression
  )) +
  
  # Heatmap tiles
  geom_tile(color = "white") +
  
  # Color gradient for expression
  scale_fill_gradient2(
    low = "blue", 
    mid = "white", 
    high = "red", 
    na.value = "black"
  ) +
  
  # Labels
  labs(
    title = "Heatmap of Expression Across Age Intervals and 20 Most Upregulated and 20 Most Downregulated Peptide Targets",
    x = "Peptide Target",
    y = "Age Interval",
    fill = "Mean Expression"
  ) +
  
  # Themes
  theme(
    # Axis text size
    axis.text.x = element_text(angle = 60, hjust = 1, size = 15),
    axis.text.y = element_text(size = 15),
    
    # Title and axis label sizes
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    
    # Legend position and text size
    legend.position = "bottom",
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 14)
  )

```

```{r}
#| label: "saving-heatmap" 

ggsave(
  filename = "05_analysis_heatmap.png",
  plot = heatmap,   # Pass the ggplot object, not the data frame
  device = "png",
  path = "../results/images",
  width = 20,
  height = 10
)
```

### Heat-map of 50 random peptide-targets plotted against age (not used)

We have decided to **leave out the plot of 50 random peptide-targets** as we decided that it would be more valuable to take the most up- and downregulated peptide-targets and look at the expression patterns for the different age-groups.

```{r}
#| eval: false

selected_peptides_random <- expression_meta_data_analysis |> 
  
  filter(!is.na(expression)) |>  # Remove rows with NA expression
  
  distinct(peptide_target) |>  # Ensure unique peptide targets
  
  sample_n(40)  # Randomly sample 40 targets
```

```{r}
#| eval: false

# Extract the peptide_target levels for ordering in the heatmap
peptide_target_levels_random <- selected_peptides_random |> 
  
  pull(peptide_target)  # Pull the peptide_target column as a vector
```

```{r}
#| eval: false

heatmap_selected_peptides_random <- expression_meta_data_analysis |> 
  
  filter(!age_interval_5_year %in% c("15-19", "20-24")) |> 
  
  semi_join(selected_peptides_random, by = "peptide_target") |>  # Keep rows with matching peptide_target
  
  filter(!is.na(expression), !is.na(age_interval_5_year)) |>  # Removing all NAs
  
  group_by(peptide_target, age_interval_5_year) |>  # Group by peptide_target and age_interval_5_year
  
  summarize(
    mean_expression = mean(expression, na.rm = TRUE),  # Calculate mean expression
    .groups = "drop"  # Drop grouping after summarization
  )
```

```{r}
#| label: "heat-map-random-40-against-age"
#| fig-width: 20
#| fig-height: 10
#| eval: false

# Create the heatmap
heatmap_selected_peptides_random |> 
  ggplot(aes(
    x = factor(peptide_target, levels = peptide_target_levels_random),  # Use the extracted levels vector
    y = age_interval_5_year, 
    fill = mean_expression
  )) +
  
  # Heatmap tiles
  geom_tile(color = "white") +
  
  # Color gradient for expression
  scale_fill_gradient2(
    low = "blue", 
    mid = "white", 
    high = "red", 
    na.value = "black"
  ) +
  
  # Labels
  labs(
    title = "Heatmap of Expression Across Age Intervals for 40 Randomly Selected Peptide Targets",
    x = "Peptide Target",
    y = "Age Interval",
    fill = "Mean Expression"
  ) +
  
  # Themes
  theme(
    # Axis text size
    axis.text.x = element_text(angle = 60, hjust = 1, size = 15),
    axis.text.y = element_text(size = 15),
    
    # Title and axis label sizes
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    axis.title.x = element_text(size = 18),
    axis.title.y = element_text(size = 18),
    
    # Legend position and text size
    legend.position = "bottom",
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 14)
  )
```

### Five heat-maps for the expression pattern sorted by pathological stage

We have decided to **leave out the bar plot of the five most up and downregulated genes for each pathologic stage** as we did not find it useful enough for our analysis.

```{r}
#| eval: false

expression_meta_data_analysis_1 <- expression_meta_data_analysis |> 
  
  rename(
    pathologic_stage_original = pathologic_stage,
    mean_expression_original = mean_expression
  )
```

```{r}
#| eval: false

# Gather all stage columns into long format
expression_long <- expression_meta_data_analysis_1 |> 
  pivot_longer(
    cols = starts_with("mean_expression_"),
    names_to = "pathologic_stage",
    values_to = "mean_expression"
  ) |> 
  mutate(
    pathologic_stage = str_replace(pathologic_stage, "mean_expression_", "")  # Clean stage names
  )

# Identify the top 5 upregulated and bottom 5 downregulated genes for each stage
top_bottom_genes <- expression_long |> 
  filter(!is.na(mean_expression)) |> 
  group_by(pathologic_stage) |> 
  slice_max(order_by = mean_expression, n = 5, with_ties = FALSE) |>  # Top 5 per stage
  bind_rows(
    expression_long |> 
      filter(!is.na(mean_expression)) |> 
      group_by(pathologic_stage) |> 
      slice_min(order_by = mean_expression, n = 5, with_ties = FALSE)  # Bottom 5 per stage
  )

# Create the bar plot
top_bottom_genes |> 
  ggplot(aes(x = reorder(peptide_target, mean_expression), 
             y = mean_expression, 
             fill = mean_expression > 0)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  facet_wrap(~ pathologic_stage, scales = "free_y") +  # One facet per stage
  scale_fill_manual(values = c("blue", "red")) +  # Red for upregulated, blue for downregulated
  labs(
    title = "Top 5 Upregulated and Downregulated Peptide Targets by Pathologic Stage",
    x = "Peptide Target",
    y = "Mean Expression"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.title = element_text(size = 14),
    strip.text = element_text(size = 12)
  )
```
