---
title: "06_analysis_lm_vital"
author:
- "Asta Zeuner - s203544 - azeuner"
- "Astrid Ginnerup - s203523 - AGinnerup"
- "Emma Dan√∏ - s203564 - EDanoe"
- "Andrea Kristensen - s193769 - AndreaMTK"
- "Yayi Wang - s243554 - Yayi0117"
html: 
    embed-resources: true
execute: 
  message: FALSE
  warning: FALSE
---

## Load libraries

```{r}
#| label: "load-libraries-06"
#| echo: TRUE
#| eval: TRUE 
#| output: FALSE  

library("tidyverse")
library("broom")
library("ggthemes")
library("ggrepel")
library("here")
```

## Loading data

```{r}
#| label: "load-data-06" 

expression_meta_data_aug <- read_tsv(file = here("data/03_expression_meta_data_aug.tsv.gz"))

```

# Linear model - dead or alive 

## Selecting variables, grouping and nesting the data for the linear modelling

We want to make a linear model of the peptide expression levels and the overall survival. From this we can investigate if there are a difference in the expression levels of some proteins between patients who survives and patients who dies.

Selecting the variables that we want to use for the linear modeling. NA's in "expression" are dropped, as we cannot make a linear model with missing expression values.

```{r}
#| label: "selecting-variables-for-linear-modeling-06"

expression_meta_data_lm_vital <- expression_meta_data_aug |> 
  select(overall_survival, 
         peptide_target,
         expression) |> 
   drop_na(expression)

expression_meta_data_lm_vital
```

Grouping the data by peptide_target and nesting the data so that each peptide_target gets a dataframe that contains the overall survival and the protein expression for all the patients.

```{r}
#| label: "grouping-and-nesting-data-06"

expression_meta_data_lm_vital_nested <- expression_meta_data_lm_vital |> 
  group_by(peptide_target) |> 
  nest() 

expression_meta_data_lm_vital_nested
```

## Adding the linear model to the dataset

Adding the linear model to the data using mutate() and lm().

```{r}
#| label: "linear-model-to-the-data-06"

expression_meta_data_lm_vital_nested_model <- expression_meta_data_lm_vital_nested |> 
  mutate(model_object = map(.x = data,
                            .f = ~lm(formula = expression ~ overall_survival,
                                   data = .x)))

expression_meta_data_lm_vital_nested_model
```

Computing the confidence intervals and p-value based on th elinear model using the tidy()-function

```{r}
#| label: "computing-CI-using-tidy-06"

expression_meta_data_lm_vital_nested_model_tidy <- expression_meta_data_lm_vital_nested_model |> 
  mutate(model_object_tidy = map(.x = model_object,
                                 .f = ~ tidy(conf.int = TRUE,
                                             conf.level = 0.95,
                                             x =.x)))

expression_meta_data_lm_vital_nested_model_tidy
```

## Wrangling the expression data estimates

```{r}
#| label: "unnest-data-06"

expression_meta_data_lm_vital_estimates <- expression_meta_data_lm_vital_nested_model_tidy |>
  unnest(model_object_tidy)

expression_meta_data_lm_vital_estimates

```

## Clean the data and calculating q.value

Term describes if the patient is dead or alive. 0 = alive and 1 = dead. Therefore the intercept is alive and the slope + intercept is dead. The slope is called Overall survival in the Term.

We are filtering for the term = "overall survival", because then we get the difference between alive and dead.

Then we select the peptide_targets, p.value, estimate and confidence interval. To be able to analyse if there are significant differences between expression compared to their vital status.

```{r}
#| label: "filtering-and-selecting-06"

expression_meta_data_lm_vital_estimates_clean <- expression_meta_data_lm_vital_estimates |> 
  filter(term == "overall_survival") |> 
  select(peptide_target,
         p.value,
         estimate,
         conf.low,
         conf.high) |> 
  ungroup(peptide_target)

expression_meta_data_lm_vital_estimates_clean
```

Adding the adjusted p-value in a new variable, q.value, and add extra variable that tells if the q-value is significant or not with alpha = 5%

```{r}
#| label: "mutate-is.significant-06"

expression_meta_data_lm_vital_estimates_clean <- expression_meta_data_lm_vital_estimates_clean |> 
  mutate(q.value = p.adjust(p = p.value),
         is_significant = case_when(q.value > 0.05 ~ "no",
                                    q.value <= 0.05 ~ "yes"),
         label = case_when(is_significant == "yes" ~ peptide_target,
                           is_significant == "no" ~ ""))

expression_meta_data_lm_vital_estimates_clean


```

```{r}
#| label: "filter-for-significant-proteins-06"

expression_meta_data_lm_vital_estimates_clean |>  
  filter(is_significant == "yes")


```

We have 6 proteins where the expression levels are found to be significantly different between dead and alive patients. From the Estimates it can be observed that 5 of them are upregulated and 1 is downregulated

## Forest plot of significant proteins for vital stage

Creating a forest plot for significant genes using ggplot.

```{r}
#| label: "forest-plot-06"
#| fig-width: 8
#| fig-height: 5


forest_plot_vital <- expression_meta_data_lm_vital_estimates_clean |> 
  filter(is_significant == "yes") |> 
  ggplot(mapping = aes(x = estimate,
                       y = fct_reorder(.f = peptide_target,
                                       .x = estimate))) + 
  geom_point(color = "#d11f2b") + 
  geom_vline(xintercept = 0,
             color = "#beeb4c",
             size = 1,
             alpha = 0.5) +
  geom_errorbarh(mapping = aes(xmin = conf.low,
                               xmax = conf.high),
                 size = 0.5,
                 height = 0.3,
                 color = "#eb4cbe") +
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0)) +
  labs(title = "Peptides associated with death of Head and Neck patients",
       x = "Estimates (95% CI)",
       y = "")

forest_plot_vital

ggsave(filename = "06_analysis_lm_forest_plot.png",
       plot = forest_plot_vital, 
       device = "png",
       path = "../results/images")

```

## Volcano plot

Creating a volcano plot to see up- and down regulated proteins.

```{r}
#| label: "volcano-plot-06"
#| fig-width: 8
#| fig-height: 5

volcano_plot_vital <- expression_meta_data_lm_vital_estimates_clean |>
  ggplot(mapping = aes(x = estimate,
                       y = -log10(p.value),
                       color = is_significant)) +
  geom_point(alpha = 0.5) +
  scale_color_manual(values = c("yes" =  "#2bd11f", 
                                "no" ="#eb4cbe")) + 
  geom_label_repel(aes(label = label),
                   size = 4,
                   max.overlaps = 25) +
  labs(title = "Peptides associated with death of Head and Neck patients",
       subtitle = "Peptides with a label were significant after multiple testing correction",
       x = "Estimates",
       y = "-log10(p)") +
  theme_minimal(base_size = 12) +
  theme(plot.title = element_text(hjust = 0),
        plot.subtitle = element_text(hjust = 0),
        legend.position = "none") 

volcano_plot_vital

ggsave(filename = "06_analysis_lm_volcano_vital.png",
       plot = volcano_plot_vital, 
       device = "png",
       path = "../results/images")

```
