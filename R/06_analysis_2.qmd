---
title: "06_analysis_2"
author:
- "Asta Zeuner - s203544 - azeuner"
- "Astrid Ginnerup - s203523 - AGinnerup"
- "Emma Dan√∏ - s203564 - EDanoe"
- "Andrea Kristensen - s193769 - AndreaMTK"
- "Yayi Wang - s243554 - Yayi0117"
html: 
    embed-resources: true
execute: 
  message: FALSE
  warning: FALSE
---

## Loading libraries

```{r}
#| label: "loading-libraries"

library("tidyverse")
library("broom")
library("ggrepel")
```

## Loading data

```{r}
#| label: "load-data" 

expression_meta_data_aug <- read_tsv(file = here("data/04_expression_meta_data_aug.tsv.gz"))

```

## Selecting columns for linear modeling

Want to make a linear model of the peptide expression levels and the overall survival.

Also removing all missing values (NA) as they cannot be included in a linear model.

```{r}

expression_meta_data_analysis6 <- expression_meta_data_aug |> 
  select(overall_survival, 
         peptide_target,
         expression) |> 
   drop_na(expression)

expression_meta_data_analysis6
```

## Grouping the dataset by peptide_target and nesting.

```{r}
expression_meta_data_analysis6_nested <- expression_meta_data_analysis6 |> 
  group_by(peptide_target) |> 
  nest() 

expression_meta_data_analysis6_nested
```

Each peptide_target now has a dataframe containing the overall survival and the normalized gene expression for the patients. The dataset is grouped by the peptides

## Adding the linear model to the dataset

```{r}

expression_meta_data_analysis6_nested_model <- expression_meta_data_analysis6_nested |> 
  mutate(model_object = map(.x = data,
                            .f = ~lm(formula = expression ~ overall_survival,
                                   data = .x)))

expression_meta_data_analysis6_nested_model
```

```{r}

expression_meta_data_analysis6_nested_model |>
 filter(peptide_target == "1433BETA") |> # Replace "g2E09" with whatever was YOUR favourite gene!
 pull(model_object)
```

Computing the confidence intervals and p-value using tidy()

```{r}

expression_meta_data_analysis6_nested_model_tidy <- expression_meta_data_analysis6_nested_model |> 
  mutate(model_object_tidy = map(.x = model_object,
                                 .f = ~ tidy(conf.int = TRUE,
                                             conf.level = 0.95,
                                             x =.x)))

expression_meta_data_analysis6_nested_model_tidy
```

## Wrangling the expression data estimates

```{r}

expression_meta_data_analysis6_estimates <- expression_meta_data_analysis6_nested_model_tidy |>
  unnest(model_object_tidy)

expression_meta_data_analysis6_estimates

```

## Clean the data and calculating q.value

Term describes if the patient is dead or alive. 0 = alive and 1 = dead. Therefore the intercept is alive and the slope is dead. **Is this correct???**

```{r}

expression_meta_data_analysis6_estimates_clean <- expression_meta_data_analysis6_estimates |> 
  filter(term == "overall_survival") |> 
  select(peptide_target,
         p.value,
         estimate,
         conf.low,
         conf.high) |> 
  ungroup(peptide_target)

expression_meta_data_analysis6_estimates_clean
```

Adding the adjusted p-value in a new variable, q.value, and add extra variable that tells if the q-value is significant or not with alpha = 5%

```{r}

expression_meta_data_analysis6_estimates_clean <- expression_meta_data_analysis6_estimates_clean |> 
  mutate(q.value = p.adjust(p = p.value),
         is_significant = case_when(q.value > 0.05 ~ "no",
                                    q.value <= 0.05 ~ "yes"))

expression_meta_data_analysis6_estimates_clean

```

```{r}

expression_meta_data_analysis6_estimates_clean |>  filter(is_significant == "yes")


```

We have 6 peptides where the expression levels are found to be significantly different between dead and alive patients.

## Volcano plot

```{r}
library("ggthemes")
```

```{r}
#| fig-width: 8
#| fig-height: 5

expression_meta_data_analysis6_estimates_clean <- expression_meta_data_analysis6_estimates_clean |>
  mutate(label = case_when(is_significant == "yes" ~ peptide_target,
                           is_significant == "no" ~ ""))
expression_meta_data_analysis6_estimates_clean

expression_meta_data_analysis6_estimates_clean |>
  ggplot(mapping = aes(x = estimate,
                       y = -log10(p.value),
                       color = is_significant)) +
  geom_label_repel(aes(label = label),
                  size = 2,
                  max.overlaps = 25) +
  labs(title = "Peptides associated with death of Head and Neck patients",
       subtitle = "Peptides highlighted in XX were significant after multiple testing correction",
       x = "Estimates",
       y = "-log10(p)") +
  theme_minimal(base_size =12) +
  theme(plot.title = element_text(hjust = 0),
        plot.subtitle = element_text(hjust = 0),
        legend.position = "none") +
  geom_point(alpha = 0.5) + 
  scale_color_colorblind()

```

**Make more plots with the significant peptides? Eg. looking at the patient groups???**
